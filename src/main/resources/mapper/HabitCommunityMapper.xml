<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.backend.HabitCommunity.mapper.HabitCommunityMapper">

    <resultMap id="HabitCommunityResultMap" type="com.example.backend.HabitCommunity.vo.HabitCommunityVO">
        <id column="community_id" property="communityId"/>
        <result column="habit_id" property="habitId"/>
        <result column="habit_likes" property="habitLikes"/>
        <result column="participants" property="participants"/>
        <result column="complete" property="complete"/>
        <result column="upload_date" property="uploadDate"/>
        <result column="habit_title" property="habitTitle"/>
        <result column="category_title" property="categoryTitle"/>
        <result column="nickname" property="nickname"/>
        <result column="avatar" property="avatar" />
    </resultMap>

    <!-- 컬럼명과 VO 필드명 명시적 매핑 -->
    <resultMap id="PostCommunityResultMap" type="com.example.backend.PostCommunity.vo.PostCommunityVO">
        <id property="postId" column="post_id"/>
        <result property="habitId" column="habit_id"/>
        <result property="imageURL" column="image_url"/>
    </resultMap>

    <!-- 메인 기능 -->
    <select id="searchHabitCommunities" parameterType="map" resultMap="HabitCommunityResultMap">
        SELECT
        hc.community_id,
        hc.habit_id,
        h.category_title,
        h.habit_title,
        u.nickname,
        u.avatar,
        hc.habit_likes,
        hc.participants,
        hc.complete,
        hc.upload_date
        FROM HabitCommunity hc
        JOIN Habit h ON hc.habit_id = h.habit_id
        JOIN Users u ON h.user_id = u.user_id

        <!-- 'myLikes' 필터가 적용되었을 때 사용자가 좋아요한 루틴만 가져오기 위해 PostLikes와 JOIN -->
        <if test="sortType == 'myLikes'">
            LEFT JOIN PostLikes pl ON pl.community_id = hc.community_id
            WHERE pl.user_id = #{userId}
        </if>

        <!-- 'myLikes'가 아닐 때는 기본 WHERE 조건 -->
        <if test="sortType != 'myLikes'">
            WHERE 1 = 1
        </if>

        <!-- 검색어 필터 적용 -->
        <if test="keyword != null and keyword != ''">
            AND (h.habit_title LIKE CONCAT('%', #{keyword}, '%')
            OR h.category_title LIKE CONCAT('%', #{keyword}, '%'))
        </if>

        <!-- 카테고리 필터 적용 -->
        <if test="categoryName != null and categoryName != ''">
            AND h.category_title = #{categoryName}
        </if>

        <!-- 동적 정렬 조건 -->
        <choose>
            <when test="sortType == 'manyLikes'">
                ORDER BY hc.habit_likes DESC
            </when>
            <when test="sortType == 'manyParticipants'">
                ORDER BY hc.participants DESC
            </when>
            <when test="sortType == 'manyCompletions'">
                ORDER BY hc.complete DESC
            </when>
            <when test="sortType == 'recent'">
                ORDER BY hc.upload_date DESC
            </when>
            <otherwise>
                ORDER BY hc.upload_date DESC <!-- 기본값은 최신순으로 정렬 -->
            </otherwise>
        </choose>
        <!-- 페이지네이션 적용 -->
        LIMIT #{size} OFFSET #{offset}
    </select>


    <!-- HabitCommunity를 communityId로 조회 -->
    <select id="selectHabitCommunityById" parameterType="long" resultMap="HabitCommunityResultMap">
        SELECT * FROM HabitCommunity WHERE community_id = #{communityId}
    </select>

    <update id="updateComplete">
        UPDATE habitcommunity hc
            JOIN (
            SELECT habit_id, COUNT(*) AS completed_count
            FROM habitcheck
            WHERE DATE(check_date) = CURDATE()  -- 오늘 날짜의 habit 데이터를 가져옴
            GROUP BY habit_id
            ) hc_check ON hc.habit_id = hc_check.habit_id
            SET hc.complete = hc_check.completed_count;
    </update>
    <!-- 모든 HabitCommunity 조회 -->
    <select id="selectAllHabitCommunities" resultMap="HabitCommunityResultMap">
        SELECT * FROM HabitCommunity
    </select>

    <!-- HabitCommunity 업데이트 -->
    <update id="updateHabitCommunity" parameterType="com.example.backend.HabitCommunity.vo.HabitCommunityVO">
        UPDATE HabitCommunity
        SET habit_id = #{habitId}, habit_likes = #{habit_likes}, participants = #{participants},
            complete = #{complete}, upload_date = #{uploadDate}
        WHERE community_id = #{communityId}
    </update>

    <!-- HabitCommunity 삭제 -->
    <delete id="deleteHabitCommunity" parameterType="long">
        DELETE FROM HabitCommunity WHERE community_id = #{communityId}
    </delete>

    <!-- 총 HabitCommunity의 루틴 개수를 구하는 메서드 -->
    <select id="countHabitCommunities" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM HabitCommunity hc
        JOIN Habit h ON hc.habit_id = h.habit_id
        <if test="keyword != null and keyword != ''">
            WHERE h.habit_title LIKE CONCAT('%', #{keyword}, '%')
            OR h.category_title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="categoryName != null and categoryName != ''">
            AND h.category_title = #{categoryName}
        </if>
    </select>



    <!-- 내가 좋아요한 루틴 조회 -->
<!--    <select id="selectLikedCommunities" parameterType="long" resultMap="HabitCommunityResultMap">-->
<!--        SELECT hc.community_id, h.habit_title, h.category_title, u.nickname, hc.habit_likes, hc.participants, hc.complete, hc.upload_date-->
<!--        FROM HabitCommunity hc-->
<!--                 JOIN PostLikes pl ON hc.community_id = pl.post_id-->
<!--                 JOIN Habit h ON hc.habit_id = h.habit_id-->
<!--                 JOIN Users u ON h.user_id = u.user_id-->
<!--        WHERE pl.user_id = #{userId}-->
<!--    </select>-->

    <!-- 내가 좋아요한 루틴 조회 -->
    <select id="selectLikedCommunities" parameterType="string" resultMap="HabitCommunityResultMap">
        SELECT hc.community_id, h.habit_title, h.category_title, u.nickname, hc.habit_likes, hc.participants, hc.complete, hc.upload_date
        FROM HabitCommunity hc
                 JOIN PostLikes pl ON hc.community_id = pl.community_id  -- 이 부분의 컬럼명이 정확한지 확인하세요
                 JOIN Habit h ON hc.habit_id = h.habit_id
                 JOIN Users u ON h.user_id = u.user_id
        WHERE pl.user_id = #{userId}
    </select>


    <!-- 도전하기 기능 (습관을 나의 습관으로 추가) -->
    <insert id="addHabitToMyHabit">
        INSERT INTO MyHabit (user_id, habit_id, state)
        VALUES (#{userId}, #{habitId}, '대기');
    </insert>
    <!--참여자 추가-->
    <update id="incrementHabitParticipants">
        UPDATE habitcommunity
        SET participants = participants + 1
        WHERE community_id = #{communityId};
    </update>

    <!--참여자 감소-->
    <update id="decrementHabitParticipants">
        UPDATE habitcommunity
        SET participants = CASE
                               WHEN participants > 0 THEN participants - 1
                               ELSE 0
            END
        WHERE community_id = #{communityId};
    </update>

    <!-- 좋아요 추가 -->
    <insert id="addLike">
        INSERT INTO PostLikes (user_id, community_id)
        VALUES (#{userId}, #{communityId})
    </insert>

    <!-- habit_likes 증가 -->
    <update id="incrementHabitLikes">
        UPDATE habitcommunity
        SET habit_likes = habit_likes + 1
        WHERE community_id = #{communityId};
    </update>

    <!-- 좋아요 취소 -->
    <delete id="removeLike">
       DELETE FROM PostLikes
       WHERE user_id = #{userId} AND community_id = #{communityId}
    </delete>

    <!-- habit_likes 감소 -->
    <update id="decrementHabitLikes">
        UPDATE HabitCommunity
        SET habit_likes = habit_likes - 1
        WHERE community_id = #{communityId}
    </update>


    <!-- 사용자가 특정 커뮤니티에 이미 좋아요를 눌렀는지 확인하는 쿼리 -->
    <select id="countUserLike" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM PostLikes
        WHERE user_id = #{userId} AND community_id = #{communityId}
    </select>

    <!-- HabitCommunity 데이터 삽입 -->
    <insert id="insertHabitCommunity" parameterType="com.example.backend.HabitCommunity.vo.HabitCommunityVO">
        INSERT INTO HabitCommunity (
            habit_id,
            habit_likes,
            participants,
            complete
        )
        VALUES (
                   #{habitId},
                   #{habitLikes},
                   #{participants},
                   #{complete}
               )
    </insert>


    <!-- habit_id에 따른 postcommunity 데이터를 조회 -->
    <select id="selectPostsByHabitId" resultMap="PostCommunityResultMap">
        SELECT
            post_id,
            habit_id,
            image_url
        FROM PostCommunity
        WHERE habit_id = #{habitId}
    </select>

    <select id="findByHabitId" resultType="long">
        SELECT
            community_id
        FROM HabitCommunity
        WHERE habit_id =#{habitId}
    </select>

    <select id="getTopLikedHabits" resultMap="HabitCommunityResultMap">
        SELECT
            hc.community_id,
            hc.habit_id,
            hc.habit_likes,
            hc.participants,
            hc.complete,
            hc.upload_date,
            h.habit_title,
            h.category_title,
            u.nickname,
            u.avatar
        FROM habitcommunity hc
                 JOIN habit h ON hc.habit_id = h.habit_id
                 JOIN users u ON h.user_id = u.user_id
        ORDER BY hc.habit_likes DESC
            LIMIT 3
    </select>
</mapper>
